Subscription based businesses are super popular and Danny realised that there was a large gap in the market - he wanted to create a new streaming service that only had food related content - something like Netflix but with only cooking shows!

Danny finds a few smart friends to launch his new startup Foodie-Fi in 2020 and started selling monthly and annual subscriptions, giving their customers unlimited on-demand access to exclusive food videos from around the world!

Danny created Foodie-Fi with a data driven mindset and wanted to ensure all future investment decisions and new features were decided using data. This case study focuses on using subscription style digital data to answer important business questions.

Link to case study : https://8weeksqlchallenge.com/case-study-3/

B. Data Analysis Questions

2.What is the monthly distribution of trial plan start_date values for our dataset - use the start of the month as the group by value
select sum(case when extract(month from start_date) = 1 then 1 
			else 0 end) as Jan,
       sum(case when extract(month from start_date) = 2 then 1 
			else 0 end) as Feb,
       sum(case when extract(month from start_date) = 3 then 1 
			else 0 end) as March,
       sum(case when extract(month from start_date) = 4 then 1 
			else 0 end) as April,
       sum(case when extract(month from start_date) = 5 then 1 
			else 0 end) as May,
       sum(case when extract(month from start_date) = 6 then 1 
			else 0 end) as June, 
       sum(case when extract(month from start_date) = 7 then 1 
			else 0 end) as July,
       sum(case when extract(month from start_date) = 8 then 1 
			else 0 end) as Aug,
       sum(case when extract(month from start_date) = 9 then 1 
			else 0 end) as Sept, 
       sum(case when extract(month from start_date) = 10 then 1 
			else 0 end) as Oct,
       sum(case when extract(month from start_date) = 11 then 1 
			else 0 end) as Nov,
       sum(case when extract(month from start_date) = 12 then 1 
			else 0 end) as Dece
from foodie_fi.subscriptions
where plan_id = 0

3.What plan start_date values occur after the year 2020 for our dataset? Show the breakdown by count of events for each plan_name
select plan_name, count(plan_name) as count
from foodie_fi.subscriptions s
join foodie_fi.plans p
on s.plan_id = p.plan_id
where extract(year from start_date) > 2020
group by plan_name, p.plan_id 
order by p.plan_id

o/p : **Schema (PostgreSQL v13)**

| plan_name     | count |
| ------------- | ----- |
| basic monthly | 8     |
| pro monthly   | 60    |
| pro annual    | 63    |
| churn         | 71    |

---

[View on DB Fiddle](https://www.db-fiddle.com/f/rHJhRrXy5hbVBNJ6F6b9gJ/16)
From the output we can infer that there are new subscriptions in the year 2021 and many people opted out Foodie_fi in 2021.

4.What is the customer count and percentage of customers who have churned rounded to 1 decimal place?
select sum, count, round(percentage,1)
from 
      (select sum (case when plan_id = 4 then 1 else 0 end) as sum, count(distinct customer_id) as count,
            ((sum (case when plan_id = 4 then 1 else 0 end)*100)/
            count(distinct customer_id)) as percentage
      from f.subscriptions) t1
      
5.How many customers have churned straight after their initial free trial - what percentage is this rounded to the nearest whole number?
select 
((select count(customer_id) as churned_after_trial
from 
      (select customer_id, plan_id, row_number() over (partition by customer_id
                               order by plan_id) as row_order
      from f.subscriptions) t1 
where plan_id = 4 and row_order = 2)*100)/(select count(distinct customer_id) from f.subscriptions)

6.What is the number and percentage of customer plans after their initial free trial?
select *, concat(((count_plan*100)/count_tot),'%') as perc
from 
      (select *, 
            (select count(distinct customer_id) from f.subscriptions) as count_tot
      from 
            (select p.plan_id, plan_name, count(plan_name) as count_plan
            from
            (select customer_id, plan_id, row_number() over (partition by customer_id
                                               order by plan_id) as row_order
                      from f.subscriptions) t1
            join f.plans p 
            on t1.plan_id = p.plan_id
            where row_order = 2
            group by p.plan_id, plan_name
            order by p.plan_id) t2) t3






















