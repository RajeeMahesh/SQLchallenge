A.Customer Nodes Exploration
4.How many days on average are customers reallocated to a different node?
select round(avg(t1.time_period),2)
from
		(select customer_id, round(avg(end_date - start_date),2) as time_period
		from data_bank.customer_nodes
		where end_date <> '9999-12-31'
		group by customer_id 
		order by customer_id) t1
    
5. What is the median, 80th and 95th percentile for this same reallocation days metric for each region?
select percentile_cont(.50) within group (order by time_period) as median, 
		percentile_cont(.80) within group (order by time_period) as eighty_percentile,
		percentile_cont(.95) within group (order by time_period) as nintyfive_percentile
from 
		(select customer_id, round(avg(end_date - start_date),2) as time_period 
		from data_bank.customer_nodes 
		where end_date <> '9999-12-31'
		group by customer_id
		order by customer_id) t1

B. Customer Transactions
2. What is the average total historical deposit counts and amounts for all customers?
select customer_id, sum(txn_amount), count(txn_amount)
from data_bank.customer_transactions
group by customer_id
order by customer_id
3. For each month - how many Data Bank customers make more than 1 deposit and either 1 purchase or 1 withdrawal in a single month?
select * from 
		(select customer_id, 
			   extract (month from txn_date) as m,
			   count(case when txn_type = 'deposit' then txn_amount end) as Dep_count,
			   count(case when txn_type = 'withdrawal' then txn_amount end) as wd_count,
			   count(case when txn_type = 'purchase' then txn_amount end) as pur_count
		from data_bank.customer_transactions
		group by customer_id,m
		order by m, customer_id) t1
where dep_count > 1 and (wd_count = 1 or pur_count = 1)
4. What is the closing balance for each customer at the end of the month?
select *, SUM(total) OVER (
							partition by customer_id
							order by m
							rows unbounded preceding) as running_total,
		  SUM(total) OVER (
							partition by customer_id
							order by m
							rows between 1 preceding and current row) as r
from(
		select  customer_id, extract (month from txn_date) as m, 
				sum(case when txn_type = 'deposit' then txn_amount
					else -txn_amount 
					end) as total 
		from data_bank.customer_transactions
		group by customer_id, m
		order by customer_id, m) t1
    
5. What is the percentage of customers who increase their closing balance by more than 5%?
select *, (big_cust/all_cust)*100 as final_answer
from 
          (select all_cust, (coalesce (big_cust,0)) as big_cust
          from 
                (select count as all_cust, lag(count) over (order by count) as big_cust from 
                      (select count( distinct ddb.customer_id)
                      from 
 
                      (select * from 
                                    (select *, ((running_total-opening_bal)/opening_bal)*100 as incr_perc
                                    from 
                                          (select customer_id, m, total, running_total, coalesce(opening_bal,0) as opening_bal
                                          from 
                                                (select *, lag(running_total) over (partition by customer_id
                                                                                order by m) as opening_bal
                                                from                                 
                                                      (select *, SUM(total) OVER (
                                                                                  partition by customer_id
                                                                                  order by m
                                                                                  rows unbounded preceding) as running_total,
                                                                SUM(total) OVER (
                                                                                  partition by customer_id
                                                                                  order by m
                                                                                  rows between 1 preceding and current row) as r
                                                      from(
                                                              select  customer_id, extract (month from txn_date) as m, 
                                                                      sum(case when txn_type = 'deposit' then txn_amount
                                                                          else -txn_amount 
                                                                          end) as total 
                                                              from data_bank.customer_transactions
                                                              group by customer_id, m
                                                              order by customer_id, m) t1)t2)t3)t4
                                    where opening_bal <> 0)t5
                      where incr_perc > 5 and opening_bal < running_total) ddb
                      union 
                      select count(distinct odb.customer_id)
                      from data_bank.customer_transactions odb) count_table) final_table) fin_ans
where big_cust <> 0

C. Data Allocation Challenge

For this multi-part challenge question - you have been requested to generate the following data elements to help the Data Bank team estimate how much data will need to be provisioned for each option:

1. running customer balance column that includes the impact each transaction
select *, sum(ps_value) over(partition by customer_id 
                               order by txn_date
                               rows unbounded preceding) as r_tot
from 
      (select *, 
              (case when txn_type = 'deposit' then txn_amount
                   else -(txn_amount)
              end) as ps_value
      from data_bank.customer_transactions
      ) t1
      
3. minimum, average and maximum values of the running balance for each customer
select customer_id, min(r_tot), round(avg(r_tot),2), max(r_tot)
from
      (select *, sum(ps_value) over(partition by customer_id 
                                     order by txn_date
                                     rows unbounded preceding) as r_tot
      from 
            (select *, 
                    (case when txn_type = 'deposit' then txn_amount
                         else -(txn_amount)
                    end) as ps_value
            from data_bank.customer_transactions
            ) t1)t2
group by customer_id

Option 1: data is allocated based off the amount of money at the end of the previous month
select m+1 as monthly_storage, sum(monthly_tot)
from 
    (select m, customer_id,sum(txn_amount)as monthly_tot
    from 
        (select customer_id, extract(month from txn_date) as m, txn_amount
        from data_bank.customer_transactions)t1
    group by m, customer_id
    order by m, customer_id)t2
group by m
