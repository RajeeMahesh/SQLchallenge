This is a series of Challenges created by Dannyma. I am trying to solve the cases. here is the link to the tasks: https://8weeksqlchallenge.com/case-study-2/

First I am trying to clean the data. 
Trying to remove the null values from customer_orders 

with t_cust_orders as
( 
      SELECT order_id, customer_id, pizza_id,
             (case when exclusions is null or exclusions like '%null%' then ''
                  else exclusions 
             end) as exclusions,
             (case when extras is null or extras like '%null%' then '' 
                  else extras 
             end) as extras, 
             order_time 
      from pizza_runner.customer_orders
 ) 
 select * from t_cust_orders
 
 with t_runner_orders as 
( 
  select order_id, runner_id,
  		(case when pickup_time is null or pickup_time like '%null%' then '' 
         	  else pickup_time 
         end) as pickup_time,
  		 (case when distance is null or distance like '%null%' then ''
  			  when distance like '%km' then trim ('km' from distance)
  			  else distance
  	     end) as distance, 
         (case when duration is null or duration like '%null%' then '' 
         	  when duration like '%mins' then trim ('mins' from duration) 
              when duration like '%minute' then trim ('minute' from duration)
              when duration like '%minutes' then trim ('minutes' from duration)
              else duration 
         end) as duration,
         (case when cancellation is null or cancellation like '%null%' then '' 
         	  else cancellation 
         end) as cancellation
   from pizza_runner.runner_orders 
) 
select * from t_runner_orders

A. Pizza Metrics

1.How many pizzas were ordered?
  select count(order_id) from t_cust_orders
  
2.How many unique customer orders were made?
select count(distinct order_id) from t_cust_orders

3.How many successful orders were delivered by each runner?
select runner_id, count(order_id) from t_runner_orders
where cancellation = ' '
group by runner_id

4.How many of each type of pizza was delivered?
select c.pizza_id, pizza_name, count(c.order_id) as no_of_p_delivered
from t_cust_orders c 
join t_runner_orders r 
on c.order_id = r.order_id
join pizza_runner.pizza_names p 
on c.pizza_id = p.pizza_id
where cancellation = ' '
group by c.pizza_id, pizza_name

5.How many Vegetarian and Meatlovers were ordered by each customer?
select customer_id, c.pizza_id, pizza_name, count(c.pizza_id) 
from t_cust_orders c 
join pizza_runner.pizza_names p 
on c.pizza_id = p.pizza_id
group by customer_id, c.pizza_id, pizza_name
order by customer_id

6.What was the maximum number of pizzas delivered in a single order?
select max(count) as max_no_of_pizza_ordered
from 
      (select order_id, count(pizza_id) as count
      from t_cust_orders
      group by order_id
      order by order_id) t1
      
7. For each customer, how many delivered pizzas had at least 1 change and how many had no changes?
 select customer_id, 
 		  count(case when extras = '' and exclusions = '' then 1
              end) as no_change,
          count(case when extras <> '' or exclusions <> '' then 1
              end) as more_change
 from t_runner_orders r 
 join t_cust_orders c 
 on r.order_id = c.order_id
 where cancellation = ''
 group by customer_id
 order by customer_id
 
 8.How many pizzas were delivered that had both exclusions and extras?
 select sum(both_changed) as both_changed
from 
      (select customer_id, 
                count(case when extras <> '' and exclusions <> '' then 1
                    end) as both_changed
       from t_runner_orders r 
       join t_cust_orders c 
       on r.order_id = c.order_id
       where cancellation = ''
       group by customer_id
       order by customer_id)t1
 
 9.What was the total volume of pizzas ordered for each hour of the day?
 select extract(hour from order_time) as hour, count(order_id)
from t_cust_orders
group by extract(hour from order_time)
order by extract(hour from order_time)

10.What was the volume of orders for each day of the week?
select Day_of_week, count(order_id)
from
      (select order_id, order_time, 
             (case when extract(dow from order_time) = 0 then 'Sunday'
                  when extract(dow from order_time) = 1 then 'Monday'
                  when extract(dow from order_time) = 2 then 'Tuesday'
                  when extract(dow from order_time) = 3 then 'Wednesday'
                  when extract(dow from order_time) = 4 then 'Thursday'
                  when extract(dow from order_time) = 5 then 'Friday'
                  when extract(dow from order_time) = 6 then 'Saturday'
             end) Day_of_Week
      from t_cust_orders 
      )t
group by Day_of_week

B. Runner and Customer Experience
1.How many runners signed up for each 1 week period? (i.e. week starts 2021-01-01)
select extract(week from registration_date) as week, count(runner_id) as no_of_runner_registered
from pizza_runner.runners
group by extract(week from registration_date)

2.What was the average time in minutes it took for each runner to arrive at the Pizza Runner HQ to pickup the order?
select runner_id, extract(minutes from avg(time_taken)) as time_taken
from 
      (select runner_id, to_timestamp(pickup_time, 'yyyy-mm-dd HH24:MI:SS'), order_time, (to_timestamp(pickup_time, 'yyyy-mm-dd HH24:MI:SS') - order_time) as time_taken
      from t_runner_orders r
      join t_cust_orders c 
      on r.order_id = c.order_id
      where cancellation = '') t1
group by runner_id
order by runner_id

3.Is there any relationship between the number of pizzas and how long the order takes to prepare?
select pizza_count, extract(minutes from avg(prep_time)) as prep_time
from                                
      (select c.order_id, count(pizza_id) as Pizza_count, avg(to_timestamp(pickup_time, 'yyyy-mm-dd HH24:MI:SS') - order_time) as prep_time
      from t_runner_orders r
      join t_cust_orders c 
      on r.order_id = c.order_id
      where cancellation =''
      group by c.order_id)t1
group by pizza_count
order by pizza_count

4.What was the average distance travelled for each customer?
select customer_id, round(avg(cast(distance as numeric)),2) as avg_distance
from t_runner_orders r
join t_cust_orders c 
on r.order_id = c.order_id
where cancellation =''
group by customer_id 
order by avg_distance                              

5.What was the difference between the longest and shortest delivery times for all orders?
select (Max(cast(duration as int)) - Min(cast(duration as int))) as diff 
from t_runner_orders r
join t_cust_orders c 
on r.order_id = c.order_id
where cancellation =''

6.What was the average speed for each runner for each delivery and do you notice any trend for these values?
select runner_id, round(avg((cast(distance as numeric)/cast(duration as int))),2) as avg_speed
from t_runner_orders  
where cancellation = ''
group by runner_id
order by avg_speed 

/* Fastest is runner 2 */

7.What is the successful delivery percentage for each runner?
select runner_id, succ, tot, ((succ*100)/tot) as succ_per
from 
    (select runner_id, 
           sum(case when duration <> '' then 1 
               else 0 end) as succ, count(order_id) as tot 
    from t_runner_orders 
    group by runner_id) t

C. Ingredient Optimisation

For solving this section i am adding one more temp table by spliting extras and exclusions as ex1, ex2, exc1, exc2
t_cust_orders2 as
    (
    select order_id, customer_id, pizza_id, 
          split_part(extras,',',1) as ex1, split_part(extras,',',2) as ex2,
          split_part(exclusions,',',1) as exc1, split_part(exclusions,',',2) as exc2,
      	  order_time
    from t_cust_orders
    )  
    
2.What was the most commonly added extra?
select topping_name, max(count) as most_opted_extra
 from
       ((select extras, topping_name, count
       from
           (select cast(ex1 as int) as extras, count(ex1) as count 
           from t_cust_orders2
           where ex1 <> ''
           group by ex1)  extra_tab
       join pizza_runner.pizza_toppings pt 
       on pt.topping_id = extra_tab.extras
       union 
       select extras, topping_name, count
       from 
           ( select cast(ex2 as int) as extras, count(ex2) as count
           from t_cust_orders2
           where ex2 <> ''
           group by ex2) extra_tab2
       join pizza_runner.pizza_toppings pt
       on pt.topping_id = extra_tab2.extras)) max_table
group by topping_name

5.Generate an order item for each record in the customers_orders table in the format of one of the following:
Meat Lovers
Meat Lovers - Exclude Beef
Meat Lovers - Extra Bacon
Meat Lovers - Exclude Cheese, Bacon - Extra Mushroom, Peppers

To solve this I am creating one more temp table

ext_exc_table as
      (
      select customer_id, pizza_name, pt1.topping_name as ex1, pt2.topping_name as ex2, pt3.topping_name as exc1, pt4.topping_name as exc2
      from 
          (select customer_id, pizza_name, 
                  (case when ex1 = '' then NULL 
                       else cast(ex1 as int) end) as ex1,
                  (case when ex2 = '' then NULL 
                       else cast(ex2 as int) end) as ex2,
                  (case when exc1 = '' then NULL 
                       else cast(exc1 as int) end) as exc1,
                  (case when exc2 = '' then NULL 
                       else cast(exc2 as int) end) as exc2
          from t_cust_orders2  c2
          join pizza_runner.pizza_names pn
          on c2.pizza_id = pn.pizza_id
          where c2.pizza_id = 1) t1
      left join pizza_runner.pizza_toppings pt1 
      on t1.ex1 = pt1.topping_id  
      left join pizza_runner.pizza_toppings pt2 
      on t1.ex2 = pt2.topping_id 
      left join pizza_runner.pizza_toppings pt3 
      on t1.ex2 = pt3.topping_id
      left join pizza_runner.pizza_toppings pt4 
      on t1.ex2 = pt4.topping_id
      )
select * from ext_exc_table

select 
	(case when pizza_name = 'Meatlovers' then customer_id end) as ML_1,
        (case when pizza_name = 'Meatlovers' and ((exc1 = 'Beef') or (exc2 = 'Beef')) then customer_id end) ML_excbeef,
        (case when pizza_name = 'Meatlovers' and ((ex1 = 'Bacon') or (ex2 = 'Bacon')) then customer_id end) ML_extbacon,
        (case when pizza_name = 'meatlovers' and (((exc1 = 'cheese') or (exc2 = 'cheese')) and ((exc1 = 'Bacon') or (exc2 = 'Bacon'))) and (((ex1 = 'Mushroom') or (ex2 = 'mushroom')) and ((ex1 = 'Pepper') or (ex2 = 'Pepper'))) then customer_id end) as ML_4 
from ext_exc_table

5.Generate an alphabetically ordered comma separated ingredient list for each pizza order from the customer_orders table and add a 2x in front of any relevant ingredients
For example: "Meat Lovers: 2xBacon, Beef, ... , Salami"
/* my work still going on for this qn */
select order_id, customer_id, trim(leading '_' from toppings)
from 
        (select order_id, customer_id, concat(def,',',extras,'_',exclusions) as toppings
        from
              (select order_id, customer_id, toppings,
              regexp_replace(regexp_replace(regexp_replace(regexp_replace(regexp_replace(regexp_replace(regexp_replace(regexp_replace(regexp_replace(regexp_replace(regexp_replace(regexp_replace(toppings, '1', 'Bacon'),'2','BBQ Sauce'),'3','Beef'),'4','Cheese'),'5','Chicken'),'6','mushrooms'),'7','onions'),'8','Pepperoni'),'9','Peppers'),'10','Salami'),'11','Tomatoes'),'12','tomato sauce') as def, 
              regexp_replace(regexp_replace(regexp_replace(regexp_replace(regexp_replace(regexp_replace(regexp_replace(regexp_replace(regexp_replace(regexp_replace(regexp_replace(regexp_replace(extras, '1', 'Bacon'),'2','BBQ Sauce'),'3','Beef'),'4','Cheese'),'5','Chicken'),'6','mushrooms'),'7','onions'),'8','Pepperoni'),'9','Peppers'),'10','Salami'),'11','Tomatoes'),'12','tomato sauce') as extras,
              regexp_replace(regexp_replace(regexp_replace(regexp_replace(regexp_replace(regexp_replace(regexp_replace(regexp_replace(regexp_replace(regexp_replace(regexp_replace(regexp_replace(exclusions, '1', 'Bacon'),'2','BBQ Sauce'),'3','Beef'),'4','Cheese'),'5','Chicken'),'6','mushrooms'),'7','onions'),'8','Pepperoni'),'9','Peppers'),'10','Salami'),'11','Tomatoes'),'12','tomato sauce') as exclusions
              from t_cust_orders co
              join pizza_runner.pizza_recipes pr
              on co.pizza_id = pr.pizza_id)t1)t2
order by customer_id






 




 
 
 
 
 
 

